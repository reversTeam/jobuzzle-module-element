/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:12:48
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-10-28 17:44:29
**************************************************************/

class ElementDataTemplateSearchView extends FormView {

	public _class = 'element';
	public _elementType = 'Element';
	public _displayNbEntity = 100;

	public getElementType : function () {
		return this['_elementType'];
	}

	public getClass : function () {
		return this['_class'];
	}

	public setElementType : function (elementType) {
		this['_elementType'] = elementType;

		return this;
	}

	public initialState : function () {
		var states = {};
		var store = serviceLocator.get('ServiceManager').get('store_manager_main_service');
		states['loader'] = true;
		states['entities'] = store['getAll'](this['getElementType']())['filterByParentEntityRoute'](this._template.getService().getParentEntity());
		states['search'] = '';
		states['displayNbEntity'] = 0;
		return states;
	}

	public update : function () {
		var store = serviceLocator.get('ServiceManager').get('store_manager_main_service');
		if (this['isMounted']()) {
			this['setState']({ 'entities' : store['getAll'](this['getElementType']())['filterByParentEntityRoute'](this._template.getService().getParentEntity()) });
		}
	}

	searchRefesh : function (e) {
		this['setState']({ 'search' : e.target.value });
	}

	onVisible : function () {
		this['setState']({
			'search' : '',
			'displayNbEntity' : 0
		});
	}

	public getEntities : function () {
		var self = this;
		var n = 0;
		var display = false;
		var elems = [];
		var entities = this.state['entities'];
		var paginator = this._template.getPaginator();
		var displayNbEntity = this.state['displayNbEntity'] + paginator['limit'];
		var style = {};

		if (this._template._resizable) {
			style['width'] = this._template.getEntityWidth();
			style['height'] = this._template.getEntityHeight();
		}

		for (var i in entities) {
			if (++n > displayNbEntity) {
				if (!display) {
					display = true;
					setTimeout(function () {
						self.setState({ 'displayNbEntity' : displayNbEntity });
					}, 1);
				}
				break ;
			}
			if (!(self.state['entities'][i]['isMe']() || !self.state['entities'][i]['search'](self.state['search']))) {
				var className = 'entity '+ entities[i].getType().toLowerCase();
				elems.push(<div className={className} style={style}>
					{entities[i]['displayTimeline']()}
				</div>);
			}
		}
		if (Object.keys(this.state.entities).length <= displayNbEntity) {
			paginator['wait'] = false;
			this._template.setReady(true);
		}

		return elems;
	}

	public display : function () {
		var translator = serviceLocator.get('Translator');
		var loader = null;
		var className = 'entities search '+ this.getClass();
		var router = serviceLocator.get('Router');
		var entities = [];

		if (this.state['loader'])
			loader = this.getTemplate('navigation_loader_main_template');

		entities = this.getEntities();
		return (<div id="entities" className={className}>
			<div className="more-actions-filter">
				<input type="text" placeholder={translator.translate('global.Search')}  onKeyUp={this.searchRefesh.bind(this)} />
				<i className="fa fa-sliders"></i>
				<i className="fa fa-trash"></i>
				<i className="fa fa-plus" onClick={this.link} data-url={router.build('/'+ this.getClass() +'/create')}></i>
			</div>
			{entities}
			<div className="loader_entities">
				{loader}
			</div>
		</div>);

		return dom;
	}

}