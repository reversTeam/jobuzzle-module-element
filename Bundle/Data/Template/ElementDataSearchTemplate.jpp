/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:12:48
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-10-04 23:04:12
**************************************************************/

class ElementDataSearchTemplate extends FormTemplate {

	_viewClassName = 'ElementDataTemplateSearchView';
	_serviceName = 'element_data_main_service';
	_type = 'Element';
	_route = 'element';


	public _resizable = true;
	public entityWidth = 140;
	public entityHeight = 166;
	public margeEntity = 10;

	public _entityWidth = undefined;
	public _entityHeight = undefined;

	#default get for _type;
	#default get for _route;

	limit = 50;
	wait = false;
	end = false;
	offset = 0;
	createElement = true;

	public initialize : function () {
		_super();
		this['_paginator'] = {};
	}

	public onListen : function () {
		var dispatcher = _super();

		dispatcher.listen(this.getType() +':search:show', this, this.showSearch.bind(this));
		dispatcher.listen('Store:'+ this.getType() +':create', this, this.create.bind(this));
		dispatcher.listen('Store:'+ this.getType() +':update', this, this.update.bind(this));
		dispatcher.listen('Store:'+ this.getType() +':remove', this, this.update.bind(this));
		dispatcher.listen('Navigation:Scroll:Bottom>90', this, this.getNext.bind(this));
		if (this._resizable)
			dispatcher.listen('Navigation:change:width', this, this.resizeEntity.bind(this));

		return dispatcher;
	}

	public getEntityWidth : function () {
		if (this._entityWidth == undefined && this._resizable)
			this.resizeEntity();
		return this._entityWidth;
	}

	public getEntityHeight : function () {
		if (this._entityHeight == undefined && this._resizable)
			this.resizeEntity();
		return this._entityHeight;
	}

	public resizeEntity : function (trigger, datas) {
		var dispatcher = serviceLocator.get('Dispatcher');
		var width = document.getElementById('content').offsetWidth - 20;
		var nbElement = Math.floor(width / (this.entityWidth + 2 * this.margeEntity));
		var widthResidue = width - (nbElement * this.entityWidth);
		var widthMoreElement = Math.floor(widthResidue / nbElement) - (2 * this.margeEntity);
		var widthElement = widthMoreElement + this.entityWidth;

		var entityHeight = Math.floor(widthElement * (this.entityHeight / this.entityWidth));

		this._entityWidth = widthElement;
		this._entityHeight = entityHeight;

		dispatcher.trigger('Timeline:'+ this.getType() +':resize', { 
			width : widthElement,
			height : entityHeight
		});
	}

	public showSearch : function (trigger, datas) {
		var parentEntity = this.getService().getParentEntity();
		var params = this.getPaginator(parentEntity);

		if (!params['wait'] && this.getVisibility())
			this.setReady(true);
		if (!(datas && params['offset'] > 0))
			this.getNext();
		this.update();
	}

	public create : function () {
		this.createElement = true;
		this.update();
	}

	public update : function () {
		if (this.getVisibility() && this._view && typeof this._view.update == 'function') {
			this._view.update();
		}
	}

	public getPaginator : function (entity) {
		var id = entity ? entity.getId() : 0;
		if (!this._paginator[id]) {
			this._paginator[id] = {};
			this._paginator[id]['limit'] = this['limit'];
			this._paginator[id]['offset'] = this['offset'];
			this._paginator[id]['wait'] = this['wait'];
			this._paginator[id]['end'] = this['end'];

		}
		return this._paginator[id];
	}

	getNext : function () {
		var self = this;
		var store = serviceLocator.get('ServiceManager').get('store_manager_main_service');
		var router = serviceLocator.get('Router');
		var parentEntity = this.getService().getParentEntity();
		var params = this.getPaginator(parentEntity);

		if (params['wait'] || params['end'] || !this.getVisibility())
			return ;

		if (this._view['setState'])
			this._view['setState']({ 'loader' : true });
		params['wait'] = true;

		if (parentEntity)
			var route = router.entityRouteForApi(parentEntity, this.getRoute());
		else
			var route = router.build('/'+ this.getRoute());
		store.request(route, params, function (data) {
			params['end'] = !data.result.length;
			params['wait'] = false;
			self._view['setState']({ 'loader' : false });
			params['offset'] += params['limit'];
			if (!self.createElement && !params['end'])
				self.getNext();
			else
				self.createElement = false;
			if (self._resizable)
				self.resizeEntity();
		});
	}

}