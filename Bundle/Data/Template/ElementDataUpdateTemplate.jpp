/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:12:48
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-09-16 00:17:37
**************************************************************/

class ElementDataUpdateTemplate extends FormTemplate {

	_viewClassName = 'ElementDataTemplateUpdateView';
	_entity = undefined;
	_serviceName = 'element_data_main_service';
	public _type = 'Element';

	public onListen : function () {
		var dispatcher = _super();

		dispatcher.listen(this.getType() +':load:entity', this, this.changeEntity.bind(this));

		return dispatcher;
	}

	public update : function (trigger, datas) {
		if (this.getVisibility()) {
			this._view.update(this['_entity'].getId());
		}
	}

	setEntityView : function (entity) {
		var dispatcher = serviceLocator.get('Dispatcher');

		if (this['_entity'] && this['_entity'].getId() == entity.getId())
			return

		if (this['_entity'] != undefined) {
			dispatcher.unlisten('Store:'+ this.getType() +'-'+ this['_entity'].getId() +':update', this);
		}

		dispatcher.listen('Store:'+ this.getType() +'-'+ entity.getId() +':update', this, this.update.bind(this));
		this._view.setEntity(entity);
		this['_entity'] = entity;
	}

	changeEntity : function (trigger, datas) {
		if (datas['entity'] && this._view && this._view.setEntity) {
			this.getService().changeTitleView(datas['entity']);
			this.setEntityView(datas['entity']);
		} else if (datas['entity']) {
			var self = this;
			setTimeout(function () {
				self.changeEntity(trigger, datas);
			}, 100);
		}
	}

	public getType : function () {
		return this['_type'];
	}

	public getEntity : function () {
		return this['_entity'];
	}

	public setEntity : function (entity) {
		this['_entity'] = entity;

		return this;
	}

}